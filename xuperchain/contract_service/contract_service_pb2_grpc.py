# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import xuperchain.contract.contract_pb2 as contract__pb2



def add_NativeCodeServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Call': grpc.unary_unary_rpc_method_handler(
            servicer.Call,
            request_deserializer=contract__pb2.NativeCallRequest.FromString,
            response_serializer=contract__pb2.NativeCallResponse.SerializeToString,
        ),
        'Ping': grpc.unary_unary_rpc_method_handler(
            servicer.Ping,
            request_deserializer=contract__pb2.PingRequest.FromString,
            response_serializer=contract__pb2.PingResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'xchain.contract.svc.NativeCode', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class NativeCode(object):
    """service provided by chain code, called by xchain
    """

    @staticmethod
    def Call(request,
             target,
             options=(),
             channel_credentials=None,
             call_credentials=None,
             insecure=False,
             compression=None,
             wait_for_ready=None,
             timeout=None,
             metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xchain.contract.svc.NativeCode/Call',
                                             contract__pb2.NativeCallRequest.SerializeToString,
                                             contract__pb2.NativeCallResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Ping(request,
             target,
             options=(),
             channel_credentials=None,
             call_credentials=None,
             insecure=False,
             compression=None,
             wait_for_ready=None,
             timeout=None,
             metadata=None):
        return grpc.experimental.unary_unary(request, target, '/xchain.contract.svc.NativeCode/Ping',
                                             contract__pb2.PingRequest.SerializeToString,
                                             contract__pb2.PingResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SyscallStub(object):
    """xchain syscall service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PutObject = channel.unary_unary(
            '/xchain.contract.svc.Syscall/PutObject',
            request_serializer=contract__pb2.PutRequest.SerializeToString,
            response_deserializer=contract__pb2.PutResponse.FromString,
        )
        self.GetObject = channel.unary_unary(
            '/xchain.contract.svc.Syscall/GetObject',
            request_serializer=contract__pb2.GetRequest.SerializeToString,
            response_deserializer=contract__pb2.GetResponse.FromString,
        )
        self.DeleteObject = channel.unary_unary(
            '/xchain.contract.svc.Syscall/DeleteObject',
            request_serializer=contract__pb2.DeleteRequest.SerializeToString,
            response_deserializer=contract__pb2.DeleteResponse.FromString,
        )
        self.NewIterator = channel.unary_unary(
            '/xchain.contract.svc.Syscall/NewIterator',
            request_serializer=contract__pb2.IteratorRequest.SerializeToString,
            response_deserializer=contract__pb2.IteratorResponse.FromString,
        )
        self.QueryTx = channel.unary_unary(
            '/xchain.contract.svc.Syscall/QueryTx',
            request_serializer=contract__pb2.QueryTxRequest.SerializeToString,
            response_deserializer=contract__pb2.QueryTxResponse.FromString,
        )
        self.QueryBlock = channel.unary_unary(
            '/xchain.contract.svc.Syscall/QueryBlock',
            request_serializer=contract__pb2.QueryBlockRequest.SerializeToString,
            response_deserializer=contract__pb2.QueryBlockResponse.FromString,
        )
        self.Transfer = channel.unary_unary(
            '/xchain.contract.svc.Syscall/Transfer',
            request_serializer=contract__pb2.TransferRequest.SerializeToString,
            response_deserializer=contract__pb2.TransferResponse.FromString,
        )
        self.ContractCall = channel.unary_unary(
            '/xchain.contract.svc.Syscall/ContractCall',
            request_serializer=contract__pb2.ContractCallRequest.SerializeToString,
            response_deserializer=contract__pb2.ContractCallResponse.FromString,
        )
        self.CrossContractQuery = channel.unary_unary(
            '/xchain.contract.svc.Syscall/CrossContractQuery',
            request_serializer=contract__pb2.CrossContractQueryRequest.SerializeToString,
            response_deserializer=contract__pb2.CrossContractQueryResponse.FromString,
        )
        self.GetAccountAddresses = channel.unary_unary(
            '/xchain.contract.svc.Syscall/GetAccountAddresses',
            request_serializer=contract__pb2.GetAccountAddressesRequest.SerializeToString,
            response_deserializer=contract__pb2.GetAccountAddressesResponse.FromString,
        )
        self.Ping = channel.unary_unary(
            '/xchain.contract.svc.Syscall/Ping',
            request_serializer=contract__pb2.PingRequest.SerializeToString,
            response_deserializer=contract__pb2.PingResponse.FromString,
        )
        self.PostLog = channel.unary_unary(
            '/xchain.contract.svc.Syscall/PostLog',
            request_serializer=contract__pb2.PostLogRequest.SerializeToString,
            response_deserializer=contract__pb2.PostLogResponse.FromString,
        )
        self.GetCallArgs = channel.unary_unary(
            '/xchain.contract.svc.Syscall/GetCallArgs',
            request_serializer=contract__pb2.GetCallArgsRequest.SerializeToString,
            response_deserializer=contract__pb2.CallArgs.FromString,
        )
        self.SetOutput = channel.unary_unary(
            '/xchain.contract.svc.Syscall/SetOutput',
            request_serializer=contract__pb2.SetOutputRequest.SerializeToString,
            response_deserializer=contract__pb2.SetOutputResponse.FromString,
        )
        self.EmitEvent = channel.unary_unary(
            '/xchain.contract.svc.Syscall/EmitEvent',
            request_serializer=contract__pb2.EmitEventRequest.SerializeToString,
            response_deserializer=contract__pb2.EmitEventResponse.FromString,
        )

